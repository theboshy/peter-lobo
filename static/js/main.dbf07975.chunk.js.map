{"version":3,"sources":["components/musicplayer/music.player.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MusicPlayerComponent","props","useState","Audio","process","audio","playing","setPlaying","toggle","useEffect","play","pause","volume","currentTime","addEventListener","removeEventListener","className","id","onClick","autoPlay","loop","src","type","App","show","setShow","width","height","muted","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAuDeA,G,YApDc,SAACC,GAC1B,IADyC,EAEzBC,mBAAS,IAAIC,MAAMC,oDAA5BC,EAFkC,sBAGXH,oBAFZ,GADuB,mBAGlCI,EAHkC,KAGzBC,EAHyB,KAKzC,SAASC,IACLD,GAAYD,GAGhBG,qBAAU,WACFH,EAAUD,EAAMK,OAASL,EAAMM,UAEnC,CAACL,IAGLG,qBAAU,WAIN,OAHAJ,EAAMO,OAAS,GACfP,EAAMQ,YAAc,IACpBR,EAAMS,iBAAiB,SAAS,kBAAMP,GAAW,MAC1C,WACHF,EAAMU,oBAAoB,SAAS,kBAAMR,GAAW,SAEzD,IAIH,OAAO,oCACH,yBAAKS,UAAU,yBAEX,yBAAKA,UAAYV,EALP,eACC,uCAI6CW,GAAG,iBAAiBC,QAAS,kBAAMV,MACvF,2BAAOS,GAAG,eAAeE,UAAQ,EAACC,MAAI,GAClC,4BAAQC,IAAI,GAAGC,KAAK,eAChB,uBAAGN,UAAU,WAAb,qDAGR,yBAAKA,UAAU,yCACf,yBAAKA,UAAU,yCACf,yBAAKA,UAAU,yCACf,yBAAKA,UAAU,yCAEf,4BAASE,QAAU,kBAAMV,KAAUQ,UAAU,2CACzC,0BAAMA,UAAU,WAAhB,SAEJ,4BAAQE,QAAU,kBAAMV,KAAUQ,UAAU,4CACxC,0BAAMA,UAAU,WAAhB,eCaLO,MAvDf,WAAgB,IAAD,EACarB,oBAAS,GADtB,mBACJsB,EADI,KACEC,EADF,KAGb,OACI,oCACE,yBAAKT,UAAU,SAASE,QAAS,kBAAMO,GAASD,KAC9C,qCAAU,6BAAV,SACC,wBAAIR,UAAU,YAAd,mCAED,kBAAC,EAAD,MACF,6BAASA,UAAYQ,EAAiD,4DAA1C,wCAAuGN,QAAS,kBAAMO,GAAQ,KACxJ,yBAAKR,GAAG,kBACN,2BAAOS,MAAM,OAAOC,OAAO,OAAOR,UAAU,EAAMS,OAAK,EAACR,MAAI,GACxD,4BAAQC,IAAI,8BAA8BC,KAAK,iBAKrD,yBAAKN,UAAWQ,EAAO,wBAA0B,IAC7C,yBAAKR,UAAWQ,EAAO,UAAY,IAC/B,yBAAKR,UAAWQ,EAAO,eAAiB,IAEpC,6BAASR,UAAWQ,EAAO,UAAY,IACnC,yBAAKR,UAAWQ,EAAO,oBAAsB,UACzC,uBAAGR,UAAU,aAAaa,KAAK,QAC3B,0BAAMb,UAAU,mBAAhB,OACA,0BAAMA,UAAU,oBAAhB,+BAEJ,uBAAGA,UAAU,aAAaa,KAAK,WAC3B,0BAAMb,UAAU,mBAAhB,WACA,0BAAMA,UAAU,oBAAhB,oBAEJ,uBAAGA,UAAU,aAAaa,KAAK,YAC3B,0BAAMb,UAAU,mBAAhB,YACA,0BAAMA,UAAU,oBAAhB,4BAEJ,uBAAGA,UAAU,aAAaa,KAAK,YAC3B,0BAAMb,UAAU,mBAAhB,WACA,0BAAMA,UAAU,oBAAhB,4BC/Bdc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dbf07975.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport './music.player.component.scss';\r\n\r\nconst MusicPlayerComponent = (props: any) => {\r\n    var playOnStart = true;\r\n    const [audio] = useState(new Audio(process.env.PUBLIC_URL + '/sources/spaceslug-proton-lander.mp3'));\r\n    const [playing, setPlaying] = useState(playOnStart);\r\n\r\n    function toggle () {\r\n        setPlaying(!playing);\r\n    }\r\n\r\n    useEffect(() => {\r\n            playing ? audio.play() : audio.pause();\r\n        },\r\n        [playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.volume = 0.4;\r\n        audio.currentTime = 300;\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, []);\r\n\r\n    var normalClass = 'music-player';\r\n    var playingClass = ' music-player music-player--disabled';\r\n    return <>\r\n        <div className=\"music-player__wrapper\">\r\n\r\n            <div className={!playing ? playingClass : normalClass } id=\"musicContainer\" onClick={() => toggle()}>\r\n                <audio id=\"audio-player\" autoPlay loop>\r\n                    <source src=\"\" type=\"audio/mpeg\"/>\r\n                        <p className=\"sr-only\">Your browser does not support the audio element.</p>\r\n                </audio>\r\n\r\n                <div className=\"music-player__bar music-player__bar1\"></div>\r\n                <div className=\"music-player__bar music-player__bar2\"></div>\r\n                <div className=\"music-player__bar music-player__bar3\"></div>\r\n                <div className=\"music-player__bar music-player__bar4\"></div>\r\n\r\n                <button  onClick={ () => toggle()} className=\"music-player__button music-player__play\">\r\n                    <span className=\"sr-only\">Play</span>\r\n                </button>\r\n                <button onClick={ () => toggle()} className=\"music-player__button music-player__pause\">\r\n                    <span className=\"sr-only\">Pause</span>\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default MusicPlayerComponent;\r\n","import React, {useState} from 'react';\r\nimport './App.scss';\r\nimport MusicPlayerComponent from \"./components/musicplayer/music.player.component\";\r\n\r\n\r\nfunction App() {\r\n    const [show, setShow] = useState(false);\r\n\r\n  return (\r\n      <>\r\n        <div className=\"header\" onClick={() => setShow(!show)}>\r\n          <h1>Peter <br/> Lobo</h1>\r\n           <h1 className=\"subtitle\">Full Stack Software Enginering</h1>\r\n        </div>\r\n          <MusicPlayerComponent/>\r\n        <section className={!show ? \"fullsize-video-bg fullsize-video-bg-c\" : \"fullsize-video-bg fullsize-video-bg-c fullsize-video-bg-s\"} onClick={() => setShow(false)}>\r\n          <div id=\"video-viewport\">\r\n            <video width=\"1920\" height=\"1280\" autoPlay={true} muted loop>\r\n                <source src=\"./sources/video_cover_2.mp4\" type=\"video/mp4\" />\r\n            </video>\r\n          </div>\r\n        </section>\r\n\r\n          <div className={show ? \"hiden-info-modal-show\" : \"\"}>\r\n              <div className={show ? \"overlay\" : \"\"}>\r\n                  <nav className={show ? \"overlay-menu\" : \"\"}>\r\n\r\n                      <section className={show ? \"content\" : \"\"}>\r\n                          <nav className={show ? \"menu menu--adsila\" : \"hidden\"}>\r\n                              <a className=\"menu__item\" href=\"/bio\">\r\n                                  <span className=\"menu__item-name\">Bio</span>\r\n                                  <span className=\"menu__item-label\">Explore Peter`s portfolios</span>\r\n                              </a>\r\n                              <a className=\"menu__item\" href=\"/career\">\r\n                                  <span className=\"menu__item-name\">Studies</span>\r\n                                  <span className=\"menu__item-label\">Discover Career</span>\r\n                              </a>\r\n                              <a className=\"menu__item\" href=\"/project\">\r\n                                  <span className=\"menu__item-name\">Projects</span>\r\n                                  <span className=\"menu__item-label\">View all achievements  </span>\r\n                              </a>\r\n                              <a className=\"menu__item\" href=\"/contact\">\r\n                                  <span className=\"menu__item-name\">Contact</span>\r\n                                  <span className=\"menu__item-label\">Contact with me </span>\r\n                              </a>\r\n\r\n                          </nav>\r\n                      </section>\r\n\r\n\r\n                  </nav>\r\n              </div>\r\n\r\n\r\n          </div>\r\n\r\n          </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}